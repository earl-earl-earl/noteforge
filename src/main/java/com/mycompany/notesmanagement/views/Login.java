/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.notesmanagement.views;

import com.mycompany.notesmanagement.dialogs.DatabaseError;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Insets;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import com.mycompany.notesmanagement.controllers.DatabaseConnector;
import com.mycompany.notesmanagement.controllers.UserSession;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;
import org.mindrot.jbcrypt.BCrypt;

/**
 *
 * @author Regine Torremoro
 */
public class Login extends javax.swing.JFrame {

    private final DatabaseConnector database;
    private int userID;

    /**
     * Creates new form Login
     */
    public Login() {

        setLookAndFeel();

        initComponents();

        database = new DatabaseConnector();

        setLocationRelativeTo(null);

        Border border = BorderFactory.createLineBorder(new Color(0, 31, 63), 2, true);

        emailInput.setBorder(border);
        passwordInput.setBorder(border);

        emailErrorLabel.setVisible(false);
        passwordErrorLabel.setVisible(false);

        attachDocumentListeners();

    }

    private void setLookAndFeel() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        tagline = new javax.swing.JLabel();
        inputPanel = new javax.swing.JPanel();
        emailInput = new javax.swing.JTextField();
        passwordInput = new javax.swing.JPasswordField();
        emailInputLabel = new javax.swing.JLabel();
        passwordInputLabel = new javax.swing.JLabel();
        emailErrorLabel = new javax.swing.JLabel();
        passwordErrorLabel = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        signUpPanel = new javax.swing.JPanel();
        noAccountText = new javax.swing.JLabel();
        signUpRedirection = new javax.swing.JLabel();
        loginInstruction = new javax.swing.JLabel();
        backgroundPanel = new javax.swing.JPanel();
        backgroundImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Note Forge - Login");
        setBackground(java.awt.Color.white);
        setName("mainFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(500, 400));

        mainPanel.setOpaque(false);
        mainPanel.setPreferredSize(new java.awt.Dimension(500, 400));
        mainPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mainPanelKeyPressed(evt);
            }
        });
        mainPanel.setLayout(new java.awt.GridBagLayout());

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        mainPanel.add(logo, new java.awt.GridBagConstraints());

        tagline.setFont(new java.awt.Font("Poppins", 1, 13)); // NOI18N
        tagline.setForeground(new java.awt.Color(0, 31, 63));
        tagline.setText("Forge Your Ideas, Organize Your Thoughts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        mainPanel.add(tagline, gridBagConstraints);

        inputPanel.setOpaque(false);
        inputPanel.setPreferredSize(new java.awt.Dimension(200, 110));
        inputPanel.setLayout(new java.awt.GridBagLayout());

        emailInput.setBackground(java.awt.Color.white);
        emailInput.setFont(new java.awt.Font("Poppins", 0, 10)); // NOI18N
        emailInput.setForeground(new java.awt.Color(0, 31, 63));
        emailInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 31, 63), 2, true));
        emailInput.setOpaque(true);
        emailInput.setPreferredSize(new java.awt.Dimension(64, 30));
        emailInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailInputActionPerformed(evt);
            }
        });
        emailInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                emailInputKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 136;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        inputPanel.add(emailInput, gridBagConstraints);
        emailInput.setBorder(new RoundedBorder(10));

        passwordInput.setBackground(java.awt.Color.white);
        passwordInput.setForeground(new java.awt.Color(0, 31, 63));
        passwordInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 31, 63), 2, true));
        passwordInput.setPreferredSize(new java.awt.Dimension(80, 30));
        passwordInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordInputKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        inputPanel.add(passwordInput, gridBagConstraints);

        emailInputLabel.setFont(new java.awt.Font("Poppins", 0, 10)); // NOI18N
        emailInputLabel.setForeground(new java.awt.Color(0, 31, 63));
        emailInputLabel.setText("Email / Username");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        inputPanel.add(emailInputLabel, gridBagConstraints);

        passwordInputLabel.setFont(new java.awt.Font("Poppins", 0, 10)); // NOI18N
        passwordInputLabel.setForeground(new java.awt.Color(0, 31, 63));
        passwordInputLabel.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        inputPanel.add(passwordInputLabel, gridBagConstraints);

        emailErrorLabel.setFont(new java.awt.Font("Poppins", 0, 9)); // NOI18N
        emailErrorLabel.setForeground(java.awt.Color.red);
        emailErrorLabel.setText("Field is blank");
        emailErrorLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        inputPanel.add(emailErrorLabel, gridBagConstraints);

        passwordErrorLabel.setFont(new java.awt.Font("Poppins", 0, 9)); // NOI18N
        passwordErrorLabel.setForeground(java.awt.Color.red);
        passwordErrorLabel.setText("Please enter your password");
        passwordErrorLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, -1, 0);
        inputPanel.add(passwordErrorLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        mainPanel.add(inputPanel, gridBagConstraints);

        loginButton.setBackground(new java.awt.Color(0, 31, 63));
        loginButton.setFont(new java.awt.Font("Poppins Black", 0, 10)); // NOI18N
        loginButton.setForeground(java.awt.Color.white);
        loginButton.setText("Login");
        loginButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loginButton.setPreferredSize(new java.awt.Dimension(200, 30));
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loginButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                loginButtonMouseExited(evt);
            }
        });
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loginButtonKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        mainPanel.add(loginButton, gridBagConstraints);

        signUpPanel.setOpaque(false);
        signUpPanel.setPreferredSize(new java.awt.Dimension(200, 40));
        signUpPanel.setLayout(new java.awt.GridBagLayout());

        noAccountText.setFont(new java.awt.Font("Poppins", 0, 10)); // NOI18N
        noAccountText.setForeground(new java.awt.Color(0, 31, 63));
        noAccountText.setText("Don't have an account?");
        signUpPanel.add(noAccountText, new java.awt.GridBagConstraints());

        signUpRedirection.setFont(new java.awt.Font("Poppins", 1, 10)); // NOI18N
        signUpRedirection.setForeground(new java.awt.Color(0, 31, 63));
        signUpRedirection.setText("Sign up");
        signUpRedirection.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signUpRedirection.setPreferredSize(new java.awt.Dimension(40, 16));
        signUpRedirection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redirectToSignUp(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                signUpRedirectionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                signUpRedirectionMouseExited(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        signUpPanel.add(signUpRedirection, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        mainPanel.add(signUpPanel, gridBagConstraints);

        loginInstruction.setFont(new java.awt.Font("Poppins", 0, 11)); // NOI18N
        loginInstruction.setForeground(new java.awt.Color(0, 31, 63));
        loginInstruction.setText("Please enter your credentials to log back in");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        mainPanel.add(loginInstruction, gridBagConstraints);

        backgroundPanel.setLayout(new java.awt.GridBagLayout());

        backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg.jpg"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        backgroundPanel.add(backgroundImage, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emailInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailInputActionPerformed

    private void redirectToSignUp(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redirectToSignUp
        // TODO add your handling code here:
        new SignUpFirstLevel().setVisible(true);
        this.dispose();

    }//GEN-LAST:event_redirectToSignUp

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        proceedToDestination();

    }

    private boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        Pattern pattern = Pattern.compile(emailRegex);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }

    private void updateBorderColor(JTextComponent component, boolean isError) {

        Border border;
        if (isError) {
            border = BorderFactory.createLineBorder(Color.RED, 2, true);
        } else {
            border = BorderFactory.createLineBorder(new Color(0, 31, 63), 2, true);
        }

        component.setBorder(border);

    }

    private boolean verifyPassword(String plainPassword, String hashedPasswordFromDB) {
        return BCrypt.checkpw(plainPassword, hashedPasswordFromDB);
    }//GEN-LAST:event_loginButtonActionPerformed

    private void attachDocumentListeners() {
        emailInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                areFieldsValidated();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                areFieldsValidated();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                areFieldsValidated();
            }
        });

        passwordInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                areFieldsValidated();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                areFieldsValidated();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                areFieldsValidated();
            }
        });

    }

    private boolean areFieldsValidated() {
        String email = emailInput.getText();
        String password = new String(passwordInput.getPassword());

        boolean emailValid = !email.isEmpty();
        boolean passwordValid = password.length() > 0;
        boolean areCredentialsValid = false;

        emailErrorLabel.setVisible(!emailValid);
        passwordErrorLabel.setVisible(!passwordValid);

        updateBorderColor(emailInput, !emailValid);
        updateBorderColor(passwordInput, !passwordValid);

        if (isUserFound(email, password)) {
            areCredentialsValid = true;
        }

        if (email.isEmpty()) {
            emailErrorLabel.setVisible(true);
            emailErrorLabel.setText("Field is blank");
        }

        if (password.length() == 0) {
            passwordErrorLabel.setVisible(true);
            passwordErrorLabel.setText("Please enter your password");
        }

        return emailValid && passwordValid && areCredentialsValid;
    }

    private boolean isUserFound(String loginIdentity, String password) {
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            database.connect();
            String query = "SELECT user_id, user_email, user_username, user_password FROM users WHERE user_email = ? OR user_username = ?";
            statement = database.getConnection().prepareStatement(query);
            statement.setString(1, loginIdentity);
            statement.setString(2, loginIdentity);
            resultSet = statement.executeQuery();

            if (!resultSet.next()) {
                emailErrorLabel.setVisible(true);
                emailErrorLabel.setText("User not found");
                updateBorderColor(emailInput, true);
                return false;
            } else {
                String emailFromDB = resultSet.getString("user_email");
                String usernameFromDB = resultSet.getString("user_username");

                if (!loginIdentity.equals(emailFromDB) && !loginIdentity.equals(usernameFromDB)) {
                    emailErrorLabel.setVisible(true);
                    emailErrorLabel.setText("User not found");
                    updateBorderColor(emailInput, true);
                    return false;
                }

                String passwordFromDB = resultSet.getString("user_password");
                if (!verifyPassword(password, passwordFromDB)) {
                    passwordErrorLabel.setVisible(true);
                    passwordErrorLabel.setText("Invalid password");
                    updateBorderColor(passwordInput, true);
                    return false;
                } else {
                    userID = resultSet.getInt("user_id");
                    return true;
                }
            }
        } catch (SQLException e) {
            new DatabaseError().setVisible(true);
            System.out.println(e);
            return false;
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
                database.close();
            } catch (SQLException ex) {
                new DatabaseError().setVisible(true);
                return false;
            }
        }
    }

    private void proceedToDestination() {
        if (areFieldsValidated()) {

            UserSession session = UserSession.getInstance();
            session.logout();
            session.setUserId(userID);

            new Dashboard().setVisible(true);
            this.dispose();

        }
    }

    private void loginButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseEntered
        // TODO add your handling code here:
        loginButton.setBackground(new Color(1, 11, 43));
    }//GEN-LAST:event_loginButtonMouseEntered

    private void loginButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseExited
        // TODO add your handling code here:
        loginButton.setBackground(new Color(1, 31, 63));
    }//GEN-LAST:event_loginButtonMouseExited

    private void signUpRedirectionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signUpRedirectionMouseEntered
        // TODO add your handling code here:
        signUpRedirection.setForeground(new Color(70, 130, 180));
    }//GEN-LAST:event_signUpRedirectionMouseEntered

    private void signUpRedirectionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signUpRedirectionMouseExited
        // TODO add your handling code here:
        signUpRedirection.setForeground(new Color(1, 31, 63));
    }//GEN-LAST:event_signUpRedirectionMouseExited

    private void loginButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loginButtonKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_loginButtonKeyPressed

    private void mainPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mainPanelKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_mainPanelKeyPressed

    private void emailInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailInputKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proceedToDestination();
        }
    }//GEN-LAST:event_emailInputKeyPressed

    private void passwordInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordInputKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proceedToDestination();
        }
    }//GEN-LAST:event_passwordInputKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    private static class RoundedBorder implements Border {

        private final int radius;

        RoundedBorder(int radius) {
            this.radius = radius;
        }

        @Override
        public Insets getBorderInsets(Component c) {
            return new Insets(this.radius + 1, this.radius + 1, this.radius + 2, this.radius);
        }

        @Override
        public boolean isBorderOpaque() {
            return true;
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            g.drawRoundRect(x, y, width - 1, height - 1, radius, radius);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel emailErrorLabel;
    private javax.swing.JTextField emailInput;
    private javax.swing.JLabel emailInputLabel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginInstruction;
    private javax.swing.JLabel logo;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel noAccountText;
    private javax.swing.JLabel passwordErrorLabel;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JLabel passwordInputLabel;
    private javax.swing.JPanel signUpPanel;
    private javax.swing.JLabel signUpRedirection;
    private javax.swing.JLabel tagline;
    // End of variables declaration//GEN-END:variables
}
